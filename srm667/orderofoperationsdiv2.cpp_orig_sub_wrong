#include<iostream>
#include<vector>
#include<string>

using namespace std;

class OrderOfOperationsDiv2 {
public:
    int minTime(vector <string> s);
    vector<int> getNearestNeighborIndex(vector<string> vs, string s);
};

int OrderOfOperationsDiv2::minTime(vector<string> s) {
    string zerostr = "";
    for(int i = 0; i < s[0].length(); i++) {
        zerostr = zerostr + "0";
        //cout<<"zerostr: "<<zerostr<<endl;
    }
    string startstr = zerostr;
    int score = 0;

    int nz = 1;
    while(nz!=0) {
        vector<int> vi = getNearestNeighborIndex(s, startstr);
        if(vi[2] == 0)
            break;
        score = score + (vi[0] * vi[0]);

        for(int i = 0; i < s[vi[1]].length(); i++) {
            if(s[vi[1]][i] == '1')
                startstr[i] = '1';
        }
        s[vi[1]] = zerostr;
        nz = vi[2];
        //cout<<"startstr: "<<startstr<<"changed: "<<vi[0]<<endl;
    }
    return score;
}

vector<int> OrderOfOperationsDiv2::getNearestNeighborIndex(vector<string> vs, string s) {
    string zerostr = "";
    for(int i = 0; i < s.length(); i++) {
        zerostr = zerostr + "0";
    }
    int minchanged = s.length() + 1;
    int minidx = -1;
    bool nonzero = 0;
    for(int i = 0; i < vs.size(); i++) {
        if(vs[i] == zerostr)
            continue;
        else
            nonzero = 1;
        int changed = 0;
        for(int j = 0; j<vs[i].length(); j++) {
            if(vs[i][j] == '1' && s[j] == '0') {
                changed = changed + 1;
            }
        }
        if(changed < minchanged) {
            minchanged = changed;
            minidx = i;
        }
    }
    vector<int> vi;
    vi.push_back(minchanged);
    vi.push_back(minidx);
    vi.push_back(nonzero);
    return vi;
}

int main() {
    OrderOfOperationsDiv2 o;
    string arr[] =  {"01000100000000001101", "00000000000000010001", "00000000000000000010", "01100000010000000000", "00000010000100110000", "00010101000001000000", "00000010010000010000", "00010010000001000000", "10000000000000000000", "00001011001001010001", "00000000000111000000", "00101001000000000010", "01000000000001100000", "00101001000100000000", "01100101100010000000", "00000100000101011110", "00010001000001001011", "00100000100000010100", "00000100000010000010", "00000000010010000000"};
    vector<string> v;
    for(int i = 0; i < 20; i++) {
        v.push_back(arr[i]);
    }
    /*v.push_back("111");
    v.push_back("001");
    v.push_back("010");*/
    cout<<o.minTime(v)<<endl;
}
